A scope chain is the connection between scopes within which variable and identifiers are accessible. This chain is directed upwards (outwords). 

important take on shadowing.

If you shadowed a variable - you generally can't access it's representation of the outer scope. 
There is a walkaround and you can access only the variable declared with var form the window aka GLobal Object using window.varName. If you can - doesn't mean you should. Don't do that.

Function Naming Scopes 

Let's first revise which function types do we know so far?

named function expression
function namedFunction() {}

anonynous function expression
function() {}

arrow function
() => {}

function namedFunction() {} - will create an identifier in the enclosing scope (enclosing scope - scope where the function was defined)

let myFunction = function() {} - myFunction is created in the enclosing scope, but function itself is not hoisted.

things ger weird here:

let myFunction = function lostFunction() {}

you can call myFunction like this: myFunction()
but, lostFunction() call will raise a Reference error.

lostFunction, as an identifier will be available only in the lostFunction scope itself.

Arrow function is also an anonymous function.

To sum up functions part:
When any sort of functions is defined - a new scope is created.

Nested functions and blocks created a scope chain which at the parsing stage determine the accesability of variables.

Scope chainging works form the inside to the outside.

If the variable lookup [in the strict mode] went all the way up to the global scope and didn't find a variable - it throws a refernce error. If you dont use a strict mode - the looked up variable is created in the global scope.

If the same variable is declared in two scopes - shadowing's is happening. Variable which is the closest to the enclosing scope is used.