When I first encountered JS I heared that in JS everything is an object. 
It's not correct.

What is an object? It's a collection ov key-value pairs. 

An object in JS looks similar to JSON, but there is a couple of differences.

1. key in JSON object must be enclosed in "double" quotes.
2. properties must be literals [primitives, objects or arrays], not expressions.

Back to JS.

Property values are almost always treated as strings, however:

anotherObj = {
    42:       "<-- this property name will be treated as an integer",
    "41":     "<-- ...and so will this one",

    true:     "<-- this property name will be treated as a string",
    [myObj]:  "<-- ...and so will this one"
};

Yoy can compute any property name using [].

function getRandInt() {...}

myObj = {
    ["x" + getRandInt()]: 
}

You can also define properties using a concise shorthand.

let myAge = 28;

let myPerson = {
    myAge
}

You can also define methods using a concise form.

let myObj = {
    sayHi() {...}
}

You can also use a spread [...] syntax, which craetes a shallow copy of properties from another object in the current object.

!important object property coecision. In object propertie names are always treated as string, exception is integer and integer like values.

let myObj = {
    41: "fortyOne"  <-- this is trated like an integer - 41
    "42": fortyTwo  <-- this is also treated like an integer - 42
    true <-- will be treated like a string "true"
}

Object destructuring is a new feature of ES6 for a concise access to object properties.

let meObj = {
    name: "Daniil",
    age: 28,
    employmentStatus: false
}

const {
    name: firstName,
    age,
    employmentStatus: isEmployed
} = meObj;

!importnat this is not an assignment mechanic, you can first initialize variables and the ndecpnstruct them.
!important in deconstruction source is on the left, target is on the right
!important if you want variable name to be the same as a property name - just use a prop name.

In most cases it's more comfortable to use destructuring, but it's not a must. 

meObj.name is perfectly fine.

Now let's see where "In JS everything is an object comes from.

let myNum = 42;

What happens if we do myNum.toString();

it returns a numbers' string representation. But why if it's a primitive, not an object?

Because if you perform a property access on a non-object and non-null value - JS will automatically and temporarily coerce a value into its' object-wrapped repressentation. something like this myNum = Number(42);

Deleting properties from the object can be done with the "delete" keyword.
!important the only thing delete does is deleting a property from the object, not freeing the memory in the heap.
delete is not the same as assigning null or undefined.

How to find out what is inside the object?

myObj = {
    favoriteNumber: 42,
    coolFact: "the first person convicted of speeding was going 8 mph",
    beardLength: undefined,
    nicknames: [ "getify", "ydkjs" ]
};

"favoriteNumber" in myObj // true

myObj.hasOwnProperty("coolFact") // true

!important there is a diffrenece in how "in" and "hasOwnProperty" behave.

"in" goes down the prototype chain.

"hasOwnProperty" checks only the current instance, not going deep.
