The best way to learn JS is to start writing JS.

In JS each file is a standalone program. A webaplication is a composition of programs.

Multiple standalone JS programs work as a single application by sharing a state in the Global Scope.

Vlaues in JS have two forms: primitive and object.

String interpolation is when you can include a variable directly into the string. In JS this feature was included in ES6.

Primitives:
- string
- bool
- number
- bigInt
- null - indicates emptinnes of value
- undefined - indicates emptinnes of value - best to use this for consitency 
- symbol - not well explained

There are threee ways to declare varibles in JS:

- var - initially was the first and only way to delcare a variable, it's a function scope and declaring a variable twice will not throw and error. 
- let - came in ES6, it's a block scope and declaring a variable twice will throw and error. 
- const - declares a variable that !important can't be reassigned, don't confuse with changed. You can mutate const object values.

Besides var / let / const, there are other syntactic forms that declare identifiers: 
- function newFunction(name) - newFunction is created in the outer scope, name in the inner scope. Both behave as variables declared with var;
- catch(err) - err behaves like a variable delcared with let.

Functions in JS are best desctibed by a word procedure. A procedure is a collection of statements that can can be invoke one or more times. Procedure can recieve inputs and return outputs.


Ok, here it gets a little bit confusing for me.

So, we can decalre a function like this:

function sayHello() {
    conosle.log("Hello, World!");
} - this is a function declaration, it appears as a statement. The assiciation of the function value with the sayHello identifier happens during the compile phase of the code.

Another way to decalre a function:

const sayHello = function() {
    conosle.log("Hello, World!");
}

Here the function expression is assigned to the variable sayHello. Association of the function and the indentifier happens at the runtime.

In JS functions are values, they can be assigned and passed around.

Functions can take arguments and return values. Function can return only one value, but if you need to return several values - you can wrap them into the object.

Since functions are values - they can be assigned as properties on the object.

Comparisons in JS are a little bit complicated.

Let's start with equality. 

There are two equality comparison operators: == and ===.

=== means "stric equality" and it checks both type and value. If the type is different - returns false automatically. This operator doesn't allow coercion aka type conversion.

As always, there is a tiny thing to remeber.
NaN === NaN is false. For NaN comparison use Number.isNaN(..).
0 === -0 is true; For this comparison use Object.is(val1, val2);

It's more or less okay with primitives, but when it comes to Object types - madre mia.

[ 1, 2, 3 ] === [ 1, 2, 3 ];    // false
{ a: 42 } === { a: 42 }         // false
(x => x * 2) === (x => x * 2)   // false

When we are comparing objects - what do we want to know? Is it the same content? Is it the same object? Well, both.

If we want to compare content - it's structural equality.
If we want to check if that's the same object - that's identity equality. 

=== checks for identity equality.

In JS all object are held by reference, are passed by reference copy and compared by reference equality.

In JS you can not compare objects by content. You should implement that yourself.

Coersive comparisons.

Coersion means a value of one type converted into a respective representation in another type.

In JS == is considered to be a loose equality operator.

If the type of the operands is the same - === and == works the same way.

Misunderstanding comes in when types are diffrent.

== first converts values so the type is the same on both sides and then compares them like ===;

Instead of loose equality it's better to call == "Coersive equality".

== converts non-number values into numbers.

42 == "42";             // true
1 == true;              // true

Relational comparison operators [<, >, <=,  =>] work the same way.

Like == they will go into strict comparison if data types are the same, but if types differ they do coercion to numbers (generally) first.

!important: if two values are strings - they are not converted to numbers, but are compared in alphabetical, dictionary-like order.

var x = "10";
var y = "9";

x < y;      // true, watch out!

There's no way to get the relational operators to avoid coercion.

It's preffered to strive for comparison of the same types, but you will run into cases when it's unavoidable.

There was a part about classes and modules. I understood about the classes, it's pretty straightforward, but I didn't get anything about the module design pattern due to the lack of experience.

What is a moudle in Python? A piece of code that can be used in another file if imported. I guess here the main idea is the same. Look for more info in the book JS Design Patterns.