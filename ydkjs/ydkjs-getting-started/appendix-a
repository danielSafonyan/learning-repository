Values and References

It's important to know that in JS there are two types of values: primitives and objects. 

Values cam be initialized to variables or appear as literals. Variable is a container for value, also can be called an identifier.

There are threee types of variables: var, let and const. 

var - has a function scope and can get redeclared with the same name. 
let - block scope, can't be redeclared with the same name, throws an error.
const - variable that should be initialized during declaration, it can't be re-assigned later.

!important: objects declared with const variable can be changed [mutated], but not re-assigned.
The best use for const is a unchangable primtive value, for instance:
const birthday = "23/11/1993" - assuming program needs this data format.

Besides these three forms, there are other ways to declare identifiers:

function hello(name) - hello is created in the outer scope and it references a function. Name is is a var in the scope of the function hello.

Another syntax to declare an identifier is in try - catch. catch(err) - err is a variable of catch block, behaves like let.

Now let's talk the important stuff: how the values are assigned and passed around. Value can be passed by copy or by reference. How to pass the value is determined by JS and depends on the type.

Primitive values are always assigned and passed by copy.

On the other hand, objects are assigned and passed by reference. That means that a variable holding an object in reality is holding a pointer. Several variables can point to one object through a reference.

Many function forms, which to chose? It depends.

Let's first get clear on names and shit.

let myFunction = function() {
    return coolStuff
    }

This is called an anonymous function and JS binds it to myFinction identifier at the rumtime.

Did I mention that functions are objects and they have a name property?

function myFunction() {}
myfunction.name returns a sring with a function name.

If it's an arrow function or anon function w/o a variable - it returns an empty string.

Let's get back to prototpes.

We first have discovered Object prototype cahining.

For instance, we have an object:

let Person = {
    hands: 2,
    legs: 2,
    talk() {
        return `Hello, my name is ${this.name}`
    }
}

let son = Object.create(Person)

now, the son object is linked to the Person object and has all his properties and methods.

Then there is another way to do that with a funciton.

function Person() {
}

Now, we can add behaviour to Person prototype via Person.prototype. Every function in JS has a protoype propertie, but don't confues it with function's prototype. It's a prototype that function refers to when creating objects with the keyword new. It says, ok, you want a new object? Mkey, let's see if I have a prototype on how to build it. If there is wan - function uses in to build the object and the object will have all the methods and properties defined in the proto.

In ES6 classes were added, it's cleaner and is preferred to use them, not two options above.